import { Socket, Namespace } from "socket.io";
import { User } from "src/database";
import { GameType } from "src/utils/types";
import { GameService } from "./game.service";
import { RoomService } from "./room.service";
import { QueueService } from "./queue.service";
export declare class GameGateway {
    private readonly roomService;
    private readonly gameService;
    private readonly queueService;
    constructor(roomService: RoomService, gameService: GameService, queueService: QueueService);
    server: Namespace;
    login(client: Socket, user: User): void;
    logout(client: Socket, user: User): void;
    getRoom(client: Socket, user: User): void;
    joinRoom(client: Socket, data: any): any;
    join(client: Socket, roomId: string): void;
    leaveRoom(client: Socket, data: any): void;
    spectate(client: Socket, data: any): void;
    setReady(client: Socket, data: any): void;
    createGame(client: Socket, data: any): void;
    getGame(client: Socket, userId: number): void;
    getCurrentGames(client: Socket, data: any): void;
    endGame(game: GameType): Promise<void>;
    startGame(client: Socket, game: GameType): void;
    rematch(client: Socket, game: GameType): void;
    movePaddle(client: Socket, data: any): void;
    stopPaddle(client: Socket, data: any): void;
    emitOpponent(client: Socket, user: User, opponent: User): void;
    searchOpponent(client: Socket, user: User): void;
    stopQueue(client: Socket, user: User): void;
}
