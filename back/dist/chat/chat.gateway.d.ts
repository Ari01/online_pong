import { OnGatewayConnection, OnGatewayDisconnect } from "@nestjs/websockets";
import { Socket, Namespace } from "socket.io";
import { Channel, Notif, User } from "src/database";
import { NotifService } from "src/users/notifs.service";
import { UsersService } from "src/users/users.service";
import { ChatService } from "./chat.service";
import { ChannelData, MessageData, NotifData } from "../utils/types";
import { ChannelService } from "./channel.service";
import { MessageService } from "./message.service";
import { RestrictionService } from "./restrictions.service";
import { GameService } from "src/game/game.service";
export declare class ChatGateway implements OnGatewayConnection, OnGatewayDisconnect {
    private readonly usersService;
    private readonly chatService;
    private readonly notifService;
    private readonly channelService;
    private readonly messageService;
    private readonly restrictionService;
    private readonly gameService;
    constructor(usersService: UsersService, chatService: ChatService, notifService: NotifService, channelService: ChannelService, messageService: MessageService, restrictionService: RestrictionService, gameService: GameService);
    server: Namespace;
    handleConnection(client: Socket): void;
    handleDisconnect(client: any): void;
    login(client: Socket, user: User): any;
    logout(client: Socket, user: User): any;
    updateUser(client: Socket, user: User): any;
    updateUserStatus(client: Socket, data: any): any;
    getFriends(client: Socket, user: User): any;
    notify(client: Socket, data: NotifData): any;
    addFriend(client: Socket, notif: Notif): any;
    deleteNotif(client: Socket, notif: Notif): any;
    deleteFriend(client: Socket, data: any): any;
    acceptInvite(client: Socket, notif: Notif): any;
    getChannels(client: Socket, userId: number): any;
    createChannel(client: Socket, chanData: ChannelData): any;
    checkChanPassword(client: Socket, data: any): unknown;
    joinChannel(client: Socket, data: any): unknown;
    deleteChannel(client: Socket, data: any): any;
    leaveChannel(client: Socket, data: any): any;
    chanInvite(client: Socket, data: NotifData): any;
    acceptChanInvite(client: Socket, notif: Notif): any;
    message(client: Socket, data: MessageData): any;
    setChannelPassword(client: Socket, data: any): any;
    removeChannelPassword(client: Socket, channel: Channel): any;
    banUser(client: Socket, data: any): any;
    muteUser(client: Socket, data: any): any;
    setAdmin(client: Socket, data: any): any;
    getConversation(client: Socket, data: any): any;
    directMessage(client: Socket, data: any): any;
    updateNewMessages(client: Socket, data: any): any;
}
